// -------------------- 配置文件开始 --------------------

// 网络和代理配置 (Global Configuration)
const globalConfig = {
    // 网络和代理核心设置
    "mixed-port": 7897,            // 混合端口：HTTP(S) 和 SOCKS5 共用端口，方便各种应用连接
    "geodata-mode": true,          // GEO 数据模式：true 使用 geoip.dat 数据库, false 使用 mmdb 数据库 (geoip.dat 更经典，mmdb 更现代)
    "tcp-concurrent": true,        // TCP 并发：允许并发连接 TCP，提高高延迟网络下的并发性能
    "unified-delay": true,         // 统一延迟：所有节点延迟统一显示，方便比较
    "allow-lan": true,             // 允许局域网连接：允许局域网内其他设备通过本机代理
    "bind-address": "*",           // 监听地址：* 表示绑定所有 IP 地址，允许所有网卡监听
    "find-process-mode": "strict", // 进程匹配模式：strict (严格), off (关闭), always (总是)。 strict 更安全
    "ipv6": false,                // IPv6 开关：是否启用 IPv6 支持 (根据网络环境选择)

    // 运行模式选择 (Mode Selection) -  rule, global, direct 三选一
    "mode": "rule",                // 规则模式 (rule)：根据规则判断是否代理；global (全局)：所有连接都走代理；direct (直连)：所有连接都直连

    // 日志等级 (Log Level) -  debug, info, warning, error, silent (从详细到简洁)
    "log-level": "error",           // 日志等级设置:  error 级别只显示错误信息，更简洁

    // 外部控制设置 (External Controller) -  用于远程控制 Clash
    "external-controller": "0.0.0.0:9090",  // 外部控制器监听地址:  0.0.0.0 表示所有 IP 都能访问
    "external-ui": "folder",               // 外部控制器 UI 目录:  "folder" 表示使用本地文件夹作为 UI
    "secret": "",                        // 外部控制器密码:  设置密码增强安全性

    //------------------------ 性能调优 (Performance Tuning) ------------------------#
    "tcp-concurrent-users": 64,      // TCP 并发连接数: 建议值 16-128，根据机器性能调整
    "keep-alive-interval": 15,       // 保活心跳间隔(秒):  建议值 15-30，减少连接断开
    "inbound-tfo": true,            // 入站 TCP Fast Open:  加速 TCP 连接建立
    "outbound-tfo": true,           // 出站 TCP Fast Open:  加速 TCP 连接建立

    // 网络接口名称 (Interface Name):  根据操作系统和硬件选择，用于绑定特定网卡
    "interface-name": "以太网",      // Windows 中的有线网卡名称，macOS 和 Linux 根据具体名称设置 (请根据实际情况修改)

    // 连接池配置 (Connection Pool) -  提高连接复用率
    "connection-pool-size": 256,     // 连接池大小: 建议值 128-512，根据并发量调整
    "idle-timeout": 60,              // 空闲超时时间(秒):  连接在空闲多久后被释放

    //------------------------ TLS 配置 (TLS Settings) ------------------------#
    "tls": {
        "enable": true,               // 启用 TLS 支持:  强制使用 TLS 加密连接
        "skip-cert-verify": false,    // 是否跳过证书验证:  false 表示不跳过，进行证书验证，更安全
        "alpn": ["h2", "http/1.1"],   // 应用层协议协商 (ALPN):  h2 和 http/1.1 常用协议
        "min-version": "1.2",         // 最低 TLS 版本:  1.2 是较安全的版本
        "max-version": "1.3",         // 最高 TLS 版本:  1.3 是最新的版本，性能和安全更好
        "cipher-suites": [             // TLS 密码套件 (Cipher Suites):  选择安全的加密算法
            "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
            "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
            "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305",
            "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        ],
        "global-client-fingerprint": "chrome", // 全局客户端指纹:  模拟 Chrome 浏览器指纹，提高匿名性
        "geox-url": {                    // GEO 数据文件 URL (geoip, geosite, mmdb): 用于规则的地理位置匹配
            "geoip": "https://ghfast.top/https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/geoip.dat", // GeoIP 数据库 (IP -> 国家/地区)
            "geosite": "https://github.com/Loyalsoldier/domain-list-custom/releases/latest/download/geosite.dat", // GeoSite 数据库 (域名 -> 分类)
            "mmdb": "https://ghfast.top/https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/Country.mmdb"  // MMDB 格式 GeoIP 数据库 (备用)
        }
    }
};

// 常量定义 (Constants)
const MULTIPLIER_REGEX = /(?:[4-9](?:\.5)?x)/i; // 正则表达式: 匹配带倍数标识的节点名称 (例如 "4x", "5.5x")
const RULE_UPDATE_INTERVAL = 86400; // 规则更新间隔 (秒):  86400 秒 = 24 小时，每天更新一次规则
const TEST_URL = "https://www.gstatic.com/generate_204"; // 测试 URL:  用于检测节点连通性的 URL (Google 的一个轻量级 URL)
const TEST_INTERVAL = 300; // 测试间隔 (秒):  300 秒 = 5 分钟，每 5 分钟测试一次节点延迟
const TEST_TOLERANCE = 20; // 测试容忍度 (毫秒):  延迟波动在这个范围内视为正常
const BALANCESTRATEGY = "sticky-sessions"; // 负载均衡策略:  "sticky-sessions" (粘性会话) 保持用户会话的连续性

// DNS 配置常量 (DNS Configuration Constants)
const DNS_CONFIG = {
    defaultDNS: ["tls://223.5.5.5:853", "tls://120.53.53.53:853"], // 默认 DNS 服务器:  阿里 DNS 和腾讯 DNS，使用 TLS 加密
    cnDnsList: ["https://dns.alidns.com/dns-query#h3=true", "https://doh.pub/dns-query#h3=true"], // 国内 DNS 列表:  阿里 DoH 和 Public DNS DoH，使用 DoH 加密
    proxyDnsList: ["https://dns.google/dns-query#h3=true", "https://cloudflare-dns.com/dns-query#h3=true", "quic://dns.adguard.com:784"] // 代理服务器 DNS 列表:  Google DoH, Cloudflare DoH, AdGuard DNS (QUIC)，使用加密 DNS
};

// 高质量节点关键词 (High Quality Proxy Keywords) - 用于识别优质节点
const HIGH_QUALITY_KEYWORDS = [
    "家宽", "家庭宽带", "IEPL", "Iepl", "iepl",
    "IPLC", "iplc", "Iplc", "专线", "高速",
    "高级", "精品", "原生", "SVIP", "svip",
    "Svip", "VIP", "vip", "Vip", "Premium",
    "premium",
    "特殊", "特殊线路", "游戏", "Game", "game"
];

// 高质量节点匹配正则 (High Quality Proxy Regex) -  将关键词列表转换为正则表达式
const HIGH_QUALITY_REGEX = new RegExp(HIGH_QUALITY_KEYWORDS.join("|"), "i");

// 域名配置 - 强制直连域名/进程 (Domain Configuration - Force Direct)
const forceProxyDomains = [
    // 以下是将某些域名或IP范围直接连接的规则 (Direct Domains/IP Ranges)
    "DOMAIN-SUFFIX,local,DIRECT", // .local 域名直接连接 (本地网络)
    "DOMAIN-SUFFIX,localhost,DIRECT", // localhost 域名直接连接 (本地主机)
    "IP-CIDR,127.0.0.0/8,DIRECT", // 127.0.0.0/8 回环地址直接连接 (本地回环)
    "IP-CIDR,172.16.0.0/12,DIRECT", // 172.16.0.0/12 私有网络地址直接连接 (常见内网)
    "IP-CIDR,192.168.0.0/16,DIRECT", // 192.168.0.0/16 私有网络地址直接连接 (常见内网)
    "IP-CIDR,10.0.0.0/8,DIRECT", // 10.0.0.0/8 私有网络地址直接连接 (常见内网)
    "IP-CIDR,17.0.0.0/8,DIRECT", // 17.0.0.0/8  Apple 私有网络地址 (可能需要直连)
    "IP-CIDR,100.64.0.0/10,DIRECT", // 100.64.0.0/10  运营商级 NAT 地址 (可能需要直连)
    "IP-CIDR,224.0.0.0/4,DIRECT", // 224.0.0.0/4 组播地址直接连接 (组播流量)
    "IP-CIDR6,fe80::/10,DIRECT", // IPv6 本地链路地址直接连接 (IPv6 本地)
    "DOMAIN-KEYWORD,pc528.net,DIRECT,no-resolve", // 特定域名不解析，直接连接 (例如某些内网域名)

    // 以下是某些进程直接连接的规则 (Direct Process Names) -  常见下载/P2P 软件
    "PROCESS-NAME,clash,DIRECT", // clash 进程自身直连
    "PROCESS-NAME,v2ray,DIRECT", // v2ray 相关进程直连
    "PROCESS-NAME,xray,DIRECT", // xray 相关进程直连
    "PROCESS-NAME,naive,DIRECT", // naiveproxy 进程直连
    "PROCESS-NAME,trojan,DIRECT", // trojan 进程直连
    "PROCESS-NAME,trojan-go,DIRECT", // trojan-go 进程直连
    "PROCESS-NAME,ss-local,DIRECT", // shadowsocks-local 进程直连
    "PROCESS-NAME,privoxy,DIRECT", // privoxy 进程直连
    "PROCESS-NAME,leaf,DIRECT", // leaf 进程直连
    "PROCESS-NAME,Thunder,DIRECT", // 迅雷进程直连
    "PROCESS-NAME,DownloadService,DIRECT", // 迅雷下载服务进程直连
    "PROCESS-NAME,qBittorrent,DIRECT", // qBittorrent 进程直连
    "PROCESS-NAME,Transmission,DIRECT", // Transmission 进程直连
    "PROCESS-NAME,fdm,DIRECT", // Free Download Manager 进程直连
    "PROCESS-NAME,aria2c,DIRECT", // aria2c 进程直连
    "PROCESS-NAME,Folx,DIRECT", // Folx 下载器进程直连
    "PROCESS-NAME,NetTransport,DIRECT", // 网际快车进程直连
    "PROCESS-NAME,uTorrent,DIRECT", // uTorrent 进程直连
    "PROCESS-NAME,WebTorrent,DIRECT", // WebTorrent 进程直连
    "PROCESS-NAME,pikpak,DIRECT", // pikpak 进程直连
    "PROCESS-NAME,SwitchHosts,DIRECT", // SwitchHosts 进程直连
    "PROCESS-NAME,xdm-app,DIRECT", // Xtreme Download Manager 进程直连
    "PROCESS-NAME,Motrix,DIRECT", // Motrix 下载器进程直连
    "PROCESS-NAME,PixPin,DIRECT", // PixPin 图钉截图进程直连 (可能需要直连)
    "PROCESS-NAME,eCloud,DIRECT", // 天翼云盘进程直连
    "PROCESS-NAME,ProcessLasso,DIRECT", // Process Lasso 进程管理器进程直连 (可能需要直连)
    "PROCESS-NAME,WeChat,DIRECT" // 微信进程直连 (可选，根据个人需求)
];

// 规则集配置 (Rule Set Configuration)
const ruleConfig = [
    {
        name: "广告集合", // 规则集名称
        group: "广告拦截", // 规则集分组 (用于规则引用)
        url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt", // 规则集 URL
        path: "./ruleset/reject.yaml" // 规则集本地保存路径
    },
    {
        name: "直连列表", // 规则集名称
        group: "国内直连", // 规则集分组
        url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/direct.txt", // 规则集 URL
        path: "./ruleset/direct.yaml" // 规则集本地保存路径
    },
    {
        name: "直连补充列表", // 规则集名称
        group: "国内直连", // 规则集分组
        url: "https://raw.githubusercontent.com/toney871030/clash_verge/master/PCDIRECT.yaml", // 规则集 URL (补充国内直连规则)
        path: "./ruleset/PCDIRECT.yaml" // 规则集本地保存路径
    },
    {
        name: "代理列表", // 规则集名称
        group: "自动选择", // 规则集分组
        url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt", // 规则集 URL
        path: "./ruleset/proxy.yaml" // 规则集本地保存路径
    },
    {
        name: "代理补充列表", // 规则集名称
        group: "自动选择", // 规则集分组
        url: "https://raw.githubusercontent.com/toney871030/clash_verge/master/PCProxy.yaml", // 规则集 URL (补充代理规则)
        path: "./ruleset/PCProxy.yaml" // 规则集本地保存路径
    }
];

// -------------------- 函数定义 (Function Definitions) --------------------

// 过滤高质量代理节点 (Filter High Quality Proxies)
function filterHighQualityProxies(proxies) {
    if (!proxies || !Array.isArray(proxies)) {
        return []; // 如果 proxies 为空或不是数组，返回空数组
    }

    const result = [];
    const regex = HIGH_QUALITY_REGEX; // 使用高质量节点正则表达式

    // 遍历代理节点，匹配高质量节点 (Iterate through proxies and match high quality ones)
    for (const proxy of proxies) {
        const proxyName = proxy.name || ""; // 获取代理节点名称，如果为空则默认为空字符串
        if (regex.test(proxyName)) { // 使用正则表达式测试节点名称是否包含高质量关键词
            result.push(proxyName); // 如果匹配，则将节点名称添加到结果数组
        }
    }
    return result; // 返回高质量节点名称数组
}

// 更新 DNS 配置 (Update DNS Configuration)
async function updateDNSConfig() {
    const { defaultDNS, cnDnsList, proxyDnsList } = DNS_CONFIG; // 解构 DNS 配置常量

    // 检查主备 DNS 是否可用 (Check primary and secondary DNS availability)
    const isPrimaryDNSAvailable = await checkDNSAvailability(defaultDNS[0]); // 检查主 DNS 是否可用
    const isSecondaryDNSAvailable = await checkDNSAvailability(defaultDNS[1]); // 检查备 DNS 是否可用

    if (!isPrimaryDNSAvailable && !isSecondaryDNSAvailable) { // 如果主备 DNS 都不可用
        console.log("主DNS和备DNS都不可用，切换到备用DNS"); // 打印日志
        DNS_CONFIG.nameserver = proxyDnsList; // 切换到代理服务器 DNS 列表作为备用 DNS
    } else {
        console.log("DNS状态正常"); // 打印日志
        DNS_CONFIG.nameserver = cnDnsList; // 使用国内 DNS 列表
    }
}

// 检查 DNS 是否可用 (Check DNS Availability)
async function checkDNSAvailability(dns) {
    try {
        // 使用 Google 的 DNS 解析接口，验证传入的 DNS 是否可用 (Use Google DNS resolution API to check DNS availability)
        const response = await fetch(`https://dns.google/resolve?name=example.com&dns=${dns}`); // 发起 DNS 查询请求
        return response.ok; // 如果响应状态码为 200-299，则认为 DNS 可用，返回 true
    } catch (error) {
        // 如果在检查 DNS 时出现错误，输出错误信息 (Output error message if DNS check fails)
        console.error(`检查 DNS ${dns} 时出错:`, error); // 打印错误日志
        return false; // 如果发生错误，返回 false (DNS 不可用)
    }
}

// 主函数，配置代理和规则 (Main Function - Configure Proxy and Rules)
function main(config) {
    try {
        // 创建新的配置副本，避免直接修改传入的配置对象 (Create a copy of the config object to avoid modifying the original)
        const newConfig = { ...config };

        // 过滤掉代理节点名称中含有倍数标识的节点 (Filter out proxies with multiplier in name, e.g., "4x")
        newConfig.proxies = newConfig.proxies.filter(proxy => !MULTIPLIER_REGEX.test(proxy.name));

        // 过滤出高质量的代理节点 (Filter out high quality proxies)
        const highQualityProxies = filterHighQualityProxies(newConfig.proxies);

        // 定义代理组 (Define Proxy Groups)
        const proxyGroups = [
            {
                "name": "自动选择", // 代理组名称 (Proxy Group Name)
                "icon": "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/speed.svg", // 代理组图标 (Icon URL)
                "type": "url-test", // 代理组类型 (Type): url-test (URL 连通性测试)
                "include-all": true, // 包括所有代理 (Include All Proxies)
                "url": TEST_URL, // 测试 URL (Test URL)
                "interval": TEST_INTERVAL, // 测试间隔 (Test Interval)
                "tolerance": TEST_TOLERANCE, // 测试容忍度 (Test Tolerance)
                "proxies": [...newConfig.proxies.map(p => p.name), ...highQualityProxies] // 代理节点列表: 所有节点 + 高质量节点
            },
            {
                "name": "负载均衡", // 代理组名称 (Proxy Group Name)
                "icon": "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/speed.svg", // 代理组图标 (Icon URL)
                "type": "load-balance", // 代理组类型 (Type): load-balance (负载均衡)
                "include-all": true, // 包括所有代理 (Include All Proxies)
                "strategy": BALANCESTRATEGY, // 负载均衡策略 (Load Balance Strategy): sticky-sessions (粘性会话)
                "url": TEST_URL, // 测试 URL (Test URL)
                "interval": TEST_INTERVAL // 测试间隔 (Test Interval)
            },
            {
                "name": "手动选择", // 代理组名称 (Proxy Group Name)
                "icon": "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/speed.svg", // 代理组图标 (Icon URL)
                "type": "select", // 代理组类型 (Type): select (手动选择)
                "proxies": ["自动选择", "高质量节点", "DIRECT"] // 可选代理组/节点: 自动选择, 高质量节点, DIRECT (直连)
            },
            {
                "name": "国内直连", // 代理组名称 (Proxy Group Name)
                "icon": "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/speed.svg", // 代理组图标 (Icon URL)
                "type": "select", // 代理组类型 (Type): select (手动选择)
                "proxies": ["DIRECT"] // 可选代理组/节点: DIRECT (直连)
            },
            {
                "name": "广告拦截", // 代理组名称 (Proxy Group Name)
                "icon": "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/ambulance.svg", // 代理组图标 (Icon URL)
                "type": "select", // 代理组类型 (Type): select (手动选择)
                "proxies": ["REJECT"] // 可选代理组/节点: REJECT (广告拦截)
            },
            {
                "name": "高质量节点", // 代理组名称 (Proxy Group Name)
                "icon": "https://fastly.jsdelivr.net/gh/clash-verge-rev/clash-verge-rev.github.io@main/docs/assets/icons/speed.svg", // 代理组图标 (Icon URL)
                "type": "select", // 代理组类型 (Type): select (手动选择)
                "proxies": ["自动选择", "负载均衡", "DIRECT", ...highQualityProxies] // 可选代理组/节点: 自动选择, 负载均衡, DIRECT, 高质量节点
            }
        ];

        // 规则列表 - 初始化为强制直连的域名 (Rule List - Initialize with force direct domains)
        const rules = [...forceProxyDomains];

        // 规则提供者 (Rule Providers) - 动态加载规则集
        const ruleProviders = {};
        ruleConfig.forEach(({ name, url, group, path }) => { // 遍历 ruleConfig 数组
            // 为每个规则集生成唯一的键 (Generate unique key for each rule set)
            const providerKey = `${name.toLowerCase()}_rules`; // 规则提供者的键名 (小写名称 + "_rules")

            // 配置规则提供者 (Configure Rule Provider)
            ruleProviders[providerKey] = {
                "type": "http", // 规则提供者类型: http (从 URL 获取规则)
                "behavior": "domain", // 规则行为: domain (域名匹配)
                "url": url, // 规则源 URL
                "interval": RULE_UPDATE_INTERVAL, // 规则更新间隔
                "path": `./rule-providers/${providerKey}.yaml` // 规则文件本地保存路径
            };

            // 将规则添加到总规则列表中 (Add rule to the main rule list)
            rules.push(`RULE-SET,${providerKey},${group}`); // 使用 RULE-SET 规则引用规则提供者，并指定分组
        });

        // 添加 GEO 规则和最终规则 (Add GEO rules and final rule)
        rules.push(
            "GEOSITE,geolocation-!cn,自动选择", // GeoSite 规则:  非中国大陆地区网站走 "自动选择" 代理组
            "GEOSITE,gfw,自动选择", // GeoSite 规则:  GFW 列表中的网站走 "自动选择" 代理组
            "GEOSITE,onedrive,国内直连", // GeoSite 规则:  OneDrive 国内版走 "国内直连"
            "GEOSITE,microsoft@cn,国内直连", // GeoSite 规则:  微软国内服务走 "国内直连"
            "GEOSITE,steam@cn,国内直连", // GeoSite 规则:  Steam 国区走 "国内直连"
            "GEOSITE,category-games@cn,国内直连", // GeoSite 规则:  国内游戏网站走 "国内直连"
            "GEOSITE,private,国内直连", // GeoSite 规则:  私有地址/内网地址走 "国内直连"
            "GEOSITE,cn,国内直连", // GeoSite 规则:  中国大陆网站走 "国内直连"
            "GEOIP,private,国内直连,no-resolve", // GeoIP 规则:  私有 IP 地址走 "国内直连"，不进行 DNS 解析
            "GEOIP,cn,国内直连", // GeoIP 规则:  中国大陆 IP 地址走 "国内直连"
            "GEOIP,telegram,自动选择", // GeoIP 规则:  Telegram IP 地址走 "自动选择" 代理组
            "GEOIP,netflix,自动选择", // GeoIP 规则:  Netflix IP 地址走 "自动选择" 代理组
            "GEOIP,cloudflare,自动选择", // GeoIP 规则:  Cloudflare IP 地址走 "自动选择" 代理组
            "GEOIP,cloudfront,自动选择", // GeoIP 规则:  CloudFront IP 地址走 "自动选择" 代理组
            "GEOIP,facebook,自动选择", // GeoIP 规则:  Facebook IP 地址走 "自动选择" 代理组
            "GEOIP,fastly,自动选择", // GeoIP 规则:  Fastly CDN IP 地址走 "自动选择" 代理组
            "GEOIP,google,自动选择", // GeoIP 规则:  Google IP 地址走 "自动选择" 代理组
            "GEOIP,twitter,自动选择", // GeoIP 规则:  Twitter IP 地址走 "自动选择" 代理组
            "GEOIP,tor,自动选择", // GeoIP 规则:  Tor IP 地址走 "自动选择" 代理组
            "MATCH,高质量节点" // 最后规则:  所有流量匹配 "高质量节点" 代理组 (兜底规则，确保未匹配到其他规则的流量走高质量节点)
        );


        const dnsConfig = {
            "enable": true,                   // 启用 DNS 解析服务 (Enable DNS service)
            "listen": ":53",                  // DNS 监听端口 (Listen Port):  标准 DNS 端口 53
            "ipv6": true,                     // 启用 IPv6 支持 (Enable IPv6)
            "prefer-h3": true,                // 优先使用 HTTP/3 (Prefer HTTP/3):  如果 DNS 服务器支持 H3，则优先使用
            "use-hosts": true,                // 使用本地 hosts 文件 (Use hosts file)
            "use-system-hosts": true,         // 使用系统 hosts 文件 (Use system hosts file)
            "respect-rules": true,            // 遵循规则 (Respect Rules):  DNS 查询也遵循代理规则
            "enhanced-mode": "fake-ip",       // 增强模式 (Enhanced Mode): fake-ip (假 IP 模式，解决 DNS 污染)
            "fake-ip-range": "198.18.0.1/16", // 假 IP 范围 (Fake IP Range):  用于 fake-ip 模式的 IP 地址段
            "fake-ip-filter": [                // 假 IP 过滤器 (Fake IP Filter):  排除某些域名使用 fake-ip
                '+.lan', '+.local', '*.arpa', '+.stun.+', 'time.*.com', 'ntp.*.com',
                '*.msftncsi.com', 'www.msftconnecttest.com', 'localhost.ptlogin2.qq.com'
            ],
            "default-nameserver": DNS_CONFIG.defaultDNS, // 默认 DNS 服务器 (Default Nameservers):  使用 DNS_CONFIG 中定义的默认 DNS
            "nameserver": DNS_CONFIG.cnDnsList,          // 国内 DNS 列表 (China Nameservers): 使用 DNS_CONFIG 中定义的国内 DNS 列表
            "proxy-server-nameserver": DNS_CONFIG.proxyDnsList, // 代理服务器 DNS 列表 (Proxy Nameservers): 使用 DNS_CONFIG 中定义的代理 DNS 列表
            "nameserver-policy": {                       // DNS 服务器策略 (Nameserver Policy):  根据域名类型选择 DNS 服务器
                "geosite:private,cn": DNS_CONFIG.cnDnsList,         // GeoSite 规则:  国内私有域名使用国内 DNS
                "geosite:geolocation-!cn,gfw": DNS_CONFIG.proxyDnsList // GeoSite 规则:  非中国大陆和 GFW 域名使用代理 DNS
            },
            "nameserver-policy-list": [                 // DNS 服务器策略列表 (Nameserver Policy List):  为特定域名指定 DNS 服务器
                ["github.com", DNS_CONFIG.proxyDnsList],          // github.com 使用代理 DNS
                ["www.google.com", DNS_CONFIG.proxyDnsList],      // www.google.com 使用代理 DNS
                ["www.facebook.com", DNS_CONFIG.proxyDnsList],    // www.facebook.com 使用代理 DNS
                ["www.youtube.com", DNS_CONFIG.proxyDnsList],     // www.youtube.com 使用代理 DNS
                ["www.netflix.com", DNS_CONFIG.proxyDnsList],     // www.netflix.com 使用代理 DNS
                ["www.xvideos.com", DNS_CONFIG.proxyDnsList],     // www.xvideos.com 使用代理 DNS
                ["pornhub.com", DNS_CONFIG.proxyDnsList],         // pornhub.com 使用代理 DNS
                ["spankbang.com", DNS_CONFIG.proxyDnsList],       // spankbang.com 使用代理 DNS
                ["krx18.com", DNS_CONFIG.proxyDnsList],           // krx18.com 使用代理 DNS
                ["wallhaven.cc", DNS_CONFIG.proxyDnsList],        // wallhaven.cc 使用代理 DNS
                ["wallpaperswide.com", DNS_CONFIG.proxyDnsList],  // wallpaperswide.com 使用代理 DNS
                ["spotify.com", DNS_CONFIG.proxyDnsList],         // spotify.com 使用代理 DNS
                ["jinricp.niuc.net", DNS_CONFIG.proxyDnsList],     // jinricp.niuc.net 使用代理 DNS
                ["sehuatang.net", DNS_CONFIG.proxyDnsList],       // sehuatang.net 使用代理 DNS
                ["oursogo.com", DNS_CONFIG.proxyDnsList],         // oursogo.com 使用代理 DNS
                ["eyny.com", DNS_CONFIG.proxyDnsList],           // eyny.com 使用代理 DNS
                ["chatgpt.com", DNS_CONFIG.proxyDnsList],         // chatgpt.com 使用代理 DNS
                ["greasyfork.org", DNS_CONFIG.proxyDnsList],      // greasyfork.org 使用代理 DNS
                ["sleazyfork.org", DNS_CONFIG.proxyDnsList],      // sleazyfork.org 使用代理 DNS
                ["linux.do", DNS_CONFIG.cnDnsList],              // linux.do 使用国内 DNS
                ["www.52pojie.cn", DNS_CONFIG.cnDnsList],        // www.52pojie.cn 使用国内 DNS
                ["meta.appinn.net", DNS_CONFIG.cnDnsList],        // meta.appinn.net 使用国内 DNS
                ["bbs.rainmeter.cn", DNS_CONFIG.cnDnsList],       // bbs.rainmeter.cn 使用国内 DNS
                ["www.pc528.net", DNS_CONFIG.cnDnsList],         // www.pc528.net 使用国内 DNS
                ["www.winos.me", DNS_CONFIG.cnDnsList],          // www.winos.me 使用国内 DNS
                ["www.cmdpe.com", DNS_CONFIG.cnDnsList],         // www.cmdpe.com 使用国内 DNS
                ["www.youxiaohou.com", DNS_CONFIG.cnDnsList],     // www.youxiaohou.com 使用国内 DNS
                ["www.pcmoe.net", DNS_CONFIG.cnDnsList],         // www.pcmoe.net 使用国内 DNS
                ["bbs.3dmgame.com", DNS_CONFIG.cnDnsList],       // bbs.3dmgame.com 使用国内 DNS
                ["www.3jihome.com", DNS_CONFIG.cnDnsList],       // www.3jihome.com 使用国内 DNS
                ["ddys.pro", DNS_CONFIG.cnDnsList],              // ddys.pro 使用国内 DNS
                ["www.5wu7rv.shop", DNS_CONFIG.cnDnsList],       // www.5wu7rv.shop 使用国内 DNS
                ["v.ikanbot.com", DNS_CONFIG.cnDnsList],         // v.ikanbot.com 使用国内 DNS
                ["www.boju.cc", DNS_CONFIG.cnDnsList],           // www.boju.cc 使用国内 DNS
                ["www.agedm.org", DNS_CONFIG.cnDnsList],         // www.agedm.org 使用国内 DNS
                ["4fb.cn", DNS_CONFIG.cnDnsList],                // 4fb.cn 使用国内 DNS
                ["www.hybase.com", DNS_CONFIG.cnDnsList],        // www.hybase.com 使用国内 DNS
                ["masuit.net", DNS_CONFIG.cnDnsList],            // masuit.net 使用国内 DNS
                ["www.applnn.com", DNS_CONFIG.cnDnsList],        // www.applnn.com 使用国内 DNS
                ["haowallpaper.com", DNS_CONFIG.cnDnsList],      // haowallpaper.com 使用国内 DNS
                [".cn", DNS_CONFIG.cnDnsList]                     // 所有 .cn 域名使用国内 DNS (通配符规则)
            ]
        };

        // 最终返回的配置对象 (Return the final configuration object)
        return {
            ...newConfig, // 合并原始配置 (Merges original configuration)
            ...globalConfig, // 合并全局配置 (Merges global configuration)
            "proxy-groups": proxyGroups, // 添加代理组配置 (Adds proxy groups configuration)
            "rules": rules, // 添加规则列表 (Adds rules list)
            "rule-providers": ruleProviders, // 添加规则提供者配置 (Adds rule providers configuration)
            "dns": dnsConfig // 添加 DNS 配置 (Adds DNS configuration)
        };

    } catch (error) {
        console.error('发生错误:', error); // 打印错误日志
        return config; // 如果发生错误，返回原始配置 (Return original config on error)
    }
}

// -------------------- 配置文件结束 --------------------
